/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IHelperFutureTrade,
  IHelperFutureTradeInterface,
} from "../IHelperFutureTrade";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "routerIndex",
        type: "uint256",
      },
    ],
    name: "getAllActivePositions",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "entryPrice",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "lastSettleTimestamp",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "collateralTokenAddress",
                type: "address",
              },
              {
                internalType: "uint64",
                name: "id",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "swapTokenAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "borrowTokenAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "collateralSwappedAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "contractSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "interestOwePerDay",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "interestOwed",
                type: "uint256",
              },
            ],
            internalType: "struct CoreBase.Position",
            name: "position",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liqPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "pnl",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "rate",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "percentPNL",
            type: "int256",
          },
        ],
        internalType: "struct HelperBase.PositionData[]",
        name: "data",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlyingTokenAddress",
        type: "address",
      },
    ],
    name: "getCollateralWalletBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "wallet",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "pairByte",
        type: "bytes32",
      },
    ],
    name: "getLiquidatePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "liqPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entryPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "leverage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slippage",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "swapTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrowTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "routerIndex",
        type: "uint256",
      },
    ],
    name: "getMaxContractSize",
    outputs: [
      {
        internalType: "uint256",
        name: "maxContractSize",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "resultsPerPage",
        type: "uint256",
      },
    ],
    name: "getPositionStates",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isLong",
            type: "bool",
          },
          {
            internalType: "int128",
            name: "PNL",
            type: "int128",
          },
          {
            internalType: "uint64",
            name: "startTimestamp",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "pairByte",
            type: "bytes32",
          },
          {
            internalType: "uint128",
            name: "averageEntryPrice",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "interestPaid",
            type: "uint128",
          },
        ],
        internalType: "struct CoreBase.PositionState[]",
        name: "positionStates",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "newCursor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "pairByte",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "routerIndex",
        type: "uint256",
      },
    ],
    name: "getUnrealizedPNL",
    outputs: [
      {
        internalType: "int256",
        name: "pnl",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "percentPNL",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IHelperFutureTrade__factory {
  static readonly abi = _abi;
  static createInterface(): IHelperFutureTradeInterface {
    return new utils.Interface(_abi) as IHelperFutureTradeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IHelperFutureTrade {
    return new Contract(address, _abi, signerOrProvider) as IHelperFutureTrade;
  }
}
