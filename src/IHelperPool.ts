/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StakePoolBase {
  export type RankInfoStruct = {
    interestBonusLending: BigNumberish;
    forwardBonusLending: BigNumberish;
    minimumStakeAmount: BigNumberish;
    maxLTVBonus: BigNumberish;
    tradingFee: BigNumberish;
    tradingBonus: BigNumberish;
  };

  export type RankInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    interestBonusLending: BigNumber;
    forwardBonusLending: BigNumber;
    minimumStakeAmount: BigNumber;
    maxLTVBonus: BigNumber;
    tradingFee: BigNumber;
    tradingBonus: BigNumber;
  };
}

export interface IHelperPoolInterface extends utils.Interface {
  contractName: "IHelperPool";
  functions: {
    "calculateBorrowingInterest(address,uint256,uint256,uint256,address)": FunctionFragment;
    "claimableInterest(address,uint256)": FunctionFragment;
    "getDepositAmountByInterestAmount(address,uint256,uint256)": FunctionFragment;
    "getInterestAmountByDepositAmount(address,uint256,uint256)": FunctionFragment;
    "getLendingInfo(address,uint256)": FunctionFragment;
    "getNextLendingForwInterest(address,uint256,uint256,uint256)": FunctionFragment;
    "getNextLendingInterest(address,uint256)": FunctionFragment;
    "getPenaltyFee(uint256,uint256)": FunctionFragment;
    "getPoolInfo(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateBorrowingInterest",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableInterest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmountByInterestAmount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestAmountByDepositAmount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextLendingForwInterest",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextLendingInterest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateBorrowingInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmountByInterestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestAmountByDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextLendingForwInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextLendingInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHelperPool extends BaseContract {
  contractName: "IHelperPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHelperPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateBorrowingInterest(
      poolAddress: string,
      daySecond: BigNumberish,
      borrowingAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ltv: BigNumber; interest: BigNumber }
    >;

    claimableInterest(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenInterest: BigNumber;
        forwInterest: BigNumber;
      }
    >;

    getDepositAmountByInterestAmount(
      poolAddress: string,
      interestAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { depositAmount: BigNumber }>;

    getInterestAmountByDepositAmount(
      poolAddress: string,
      depositAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { interestAmount: BigNumber }>;

    getLendingInfo(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        StakePoolBase.RankInfoStructOutput
      ] & {
        lendingBalance: BigNumber;
        interestTokenGained: BigNumber;
        interestForwGained: BigNumber;
        rank: number;
        rankInfo: StakePoolBase.RankInfoStructOutput;
      }
    >;

    getNextLendingForwInterest(
      poolAddress: string,
      newDepositAmount: BigNumberish,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { interestRate: BigNumber }>;

    getNextLendingInterest(
      poolAddress: string,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penaltyFee: BigNumber }>;

    getPoolInfo(
      poolAddress: string,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowingInterest: BigNumber;
        lendingTokenInterest: BigNumber;
        lendingForwInterest: BigNumber;
        utilizationRate: BigNumber;
        pTokenTotalSupply: BigNumber;
        currentSupply: BigNumber;
      }
    >;
  };

  calculateBorrowingInterest(
    poolAddress: string,
    daySecond: BigNumberish,
    borrowingAmount: BigNumberish,
    collateralAmount: BigNumberish,
    collateralTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { ltv: BigNumber; interest: BigNumber }>;

  claimableInterest(
    poolAddress: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenInterest: BigNumber;
      forwInterest: BigNumber;
    }
  >;

  getDepositAmountByInterestAmount(
    poolAddress: string,
    interestAmount: BigNumberish,
    daySecond: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterestAmountByDepositAmount(
    poolAddress: string,
    depositAmount: BigNumberish,
    daySecond: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLendingInfo(
    poolAddress: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      StakePoolBase.RankInfoStructOutput
    ] & {
      lendingBalance: BigNumber;
      interestTokenGained: BigNumber;
      interestForwGained: BigNumber;
      rank: number;
      rankInfo: StakePoolBase.RankInfoStructOutput;
    }
  >;

  getNextLendingForwInterest(
    poolAddress: string,
    newDepositAmount: BigNumberish,
    forwPriceRate: BigNumberish,
    forwPricePrecision: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextLendingInterest(
    poolAddress: string,
    depositAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPenaltyFee(
    nftId: BigNumberish,
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    poolAddress: string,
    forwPriceRate: BigNumberish,
    forwPricePrecision: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      borrowingInterest: BigNumber;
      lendingTokenInterest: BigNumber;
      lendingForwInterest: BigNumber;
      utilizationRate: BigNumber;
      pTokenTotalSupply: BigNumber;
      currentSupply: BigNumber;
    }
  >;

  callStatic: {
    calculateBorrowingInterest(
      poolAddress: string,
      daySecond: BigNumberish,
      borrowingAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ltv: BigNumber; interest: BigNumber }
    >;

    claimableInterest(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenInterest: BigNumber;
        forwInterest: BigNumber;
      }
    >;

    getDepositAmountByInterestAmount(
      poolAddress: string,
      interestAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestAmountByDepositAmount(
      poolAddress: string,
      depositAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingInfo(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        StakePoolBase.RankInfoStructOutput
      ] & {
        lendingBalance: BigNumber;
        interestTokenGained: BigNumber;
        interestForwGained: BigNumber;
        rank: number;
        rankInfo: StakePoolBase.RankInfoStructOutput;
      }
    >;

    getNextLendingForwInterest(
      poolAddress: string,
      newDepositAmount: BigNumberish,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextLendingInterest(
      poolAddress: string,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolAddress: string,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowingInterest: BigNumber;
        lendingTokenInterest: BigNumber;
        lendingForwInterest: BigNumber;
        utilizationRate: BigNumber;
        pTokenTotalSupply: BigNumber;
        currentSupply: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    calculateBorrowingInterest(
      poolAddress: string,
      daySecond: BigNumberish,
      borrowingAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableInterest(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmountByInterestAmount(
      poolAddress: string,
      interestAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestAmountByDepositAmount(
      poolAddress: string,
      depositAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingInfo(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextLendingForwInterest(
      poolAddress: string,
      newDepositAmount: BigNumberish,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextLendingInterest(
      poolAddress: string,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolAddress: string,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateBorrowingInterest(
      poolAddress: string,
      daySecond: BigNumberish,
      borrowingAmount: BigNumberish,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableInterest(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositAmountByInterestAmount(
      poolAddress: string,
      interestAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestAmountByDepositAmount(
      poolAddress: string,
      depositAmount: BigNumberish,
      daySecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingInfo(
      poolAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextLendingForwInterest(
      poolAddress: string,
      newDepositAmount: BigNumberish,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextLendingInterest(
      poolAddress: string,
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      poolAddress: string,
      forwPriceRate: BigNumberish,
      forwPricePrecision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
