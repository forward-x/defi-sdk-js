/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CoreBase {
  export type LoanStruct = {
    interestPaid: BigNumberish;
    borrowTokenAddress: string;
    rolloverTimestamp: BigNumberish;
    lastSettleTimestamp: BigNumberish;
    collateralTokenAddress: string;
    borrowAmount: BigNumberish;
    collateralAmount: BigNumberish;
    owedPerDay: BigNumberish;
    minInterest: BigNumberish;
    interestOwed: BigNumberish;
  };

  export type LoanStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    interestPaid: BigNumber;
    borrowTokenAddress: string;
    rolloverTimestamp: BigNumber;
    lastSettleTimestamp: BigNumber;
    collateralTokenAddress: string;
    borrowAmount: BigNumber;
    collateralAmount: BigNumber;
    owedPerDay: BigNumber;
    minInterest: BigNumber;
    interestOwed: BigNumber;
  };

  export type LoanConfigStruct = {
    borrowTokenAddress: string;
    collateralTokenAddress: string;
    safeLTV: BigNumberish;
    maxLTV: BigNumberish;
    liquidationLTV: BigNumberish;
    bountyFeeRate: BigNumberish;
    penaltyFeeRate: BigNumberish;
    maxOraclePriceDiffPercent: BigNumberish;
    maxLiquidationOraclePriceDiffPercent: BigNumberish;
    minimumCollateralInUSD: BigNumberish;
  };

  export type LoanConfigStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    borrowTokenAddress: string;
    collateralTokenAddress: string;
    safeLTV: BigNumber;
    maxLTV: BigNumber;
    liquidationLTV: BigNumber;
    bountyFeeRate: BigNumber;
    penaltyFeeRate: BigNumber;
    maxOraclePriceDiffPercent: BigNumber;
    maxLiquidationOraclePriceDiffPercent: BigNumber;
    minimumCollateralInUSD: BigNumber;
  };

  export type LoanExtStruct = {
    active: boolean;
    startTimestamp: BigNumberish;
    initialBorrowTokenPrice: BigNumberish;
    initialCollateralTokenPrice: BigNumberish;
  };

  export type LoanExtStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    active: boolean;
    startTimestamp: BigNumber;
    initialBorrowTokenPrice: BigNumber;
    initialCollateralTokenPrice: BigNumber;
  };

  export type NextForwLendingDistributionPerBlockStruct = {
    amount: BigNumberish;
    targetBlock: BigNumberish;
  };

  export type NextForwLendingDistributionPerBlockStructOutput = [
    BigNumber,
    BigNumber
  ] & { amount: BigNumber; targetBlock: BigNumber };

  export type PairStruct = { pair0: string; pair1: string };

  export type PairStructOutput = [string, string] & {
    pair0: string;
    pair1: string;
  };

  export type PoolStatStruct = {
    totalBorrowAmount: BigNumberish;
    borrowInterestOwedPerDay: BigNumberish;
    totalInterestPaid: BigNumberish;
    totalBorrowAmountFromTrading: BigNumberish;
    borrowInterestOwedPerDayFromTrading: BigNumberish;
    totalInterestPaidFromTrading: BigNumberish;
    updatedTimestamp: BigNumberish;
  };

  export type PoolStatStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalBorrowAmount: BigNumber;
    borrowInterestOwedPerDay: BigNumber;
    totalInterestPaid: BigNumber;
    totalBorrowAmountFromTrading: BigNumber;
    borrowInterestOwedPerDayFromTrading: BigNumber;
    totalInterestPaidFromTrading: BigNumber;
    updatedTimestamp: BigNumber;
  };

  export type PositionConfigStruct = {
    maintenanceMargin: BigNumberish;
    minimumMargin: BigNumberish;
    bountyFeeRateToProtocol: BigNumberish;
    bountyFeeRateToLiquidator: BigNumberish;
    forwRewardAmount: BigNumberish;
    positionSizeTargetInUSD: BigNumberish;
    minOpenPositionSize: BigNumberish;
    maxOpenPositionSize: BigNumberish;
  };

  export type PositionConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maintenanceMargin: BigNumber;
    minimumMargin: BigNumber;
    bountyFeeRateToProtocol: BigNumber;
    bountyFeeRateToLiquidator: BigNumber;
    forwRewardAmount: BigNumber;
    positionSizeTargetInUSD: BigNumber;
    minOpenPositionSize: BigNumber;
    maxOpenPositionSize: BigNumber;
  };

  export type PositionStateStruct = {
    active: boolean;
    isLong: boolean;
    PNL: BigNumberish;
    startTimestamp: BigNumberish;
    pairByte: BytesLike;
    averageEntryPrice: BigNumberish;
    interestPaid: BigNumberish;
    totalTradingFee: BigNumberish;
    totalSwapFee: BigNumberish;
  };

  export type PositionStateStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    active: boolean;
    isLong: boolean;
    PNL: BigNumber;
    startTimestamp: BigNumber;
    pairByte: string;
    averageEntryPrice: BigNumber;
    interestPaid: BigNumber;
    totalTradingFee: BigNumber;
    totalSwapFee: BigNumber;
  };

  export type PositionStruct = {
    id: BigNumberish;
    collateralTokenAddress: string;
    lastSettleTimestamp: BigNumberish;
    borrowTokenAddress: string;
    swapTokenAddress: string;
    entryPrice: BigNumberish;
    contractSize: BigNumberish;
    borrowAmount: BigNumberish;
    collateralSwappedAmount: BigNumberish;
    interestOwed: BigNumberish;
    interestOwePerDay: BigNumberish;
  };

  export type PositionStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    collateralTokenAddress: string;
    lastSettleTimestamp: BigNumber;
    borrowTokenAddress: string;
    swapTokenAddress: string;
    entryPrice: BigNumber;
    contractSize: BigNumber;
    borrowAmount: BigNumber;
    collateralSwappedAmount: BigNumber;
    interestOwed: BigNumber;
    interestOwePerDay: BigNumber;
  };

  export type SwapConfigStruct = {
    token0: string;
    maxSwapSize: BigNumberish;
    maxPriceImpact: BigNumberish;
    maxOraclePriceDiffPercent: BigNumberish;
    maxLiquidationOraclePriceDiffPercent: BigNumberish;
  };

  export type SwapConfigStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    token0: string;
    maxSwapSize: BigNumber;
    maxPriceImpact: BigNumber;
    maxOraclePriceDiffPercent: BigNumber;
    maxLiquidationOraclePriceDiffPercent: BigNumber;
  };
}

export declare namespace APHLibrary {
  export type OpenPositionParamsStruct = {
    nftId: BigNumberish;
    entryPrice: BigNumberish;
    leverage: BigNumberish;
    contractSize: BigNumberish;
    slipPage: BigNumberish;
    borrowAmount: BigNumberish;
    interestOwePerDay: BigNumberish;
    newLong: boolean;
  };

  export type OpenPositionParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    nftId: BigNumber;
    entryPrice: BigNumber;
    leverage: BigNumber;
    contractSize: BigNumber;
    slipPage: BigNumber;
    borrowAmount: BigNumber;
    interestOwePerDay: BigNumber;
    newLong: boolean;
  };

  export type TokenAddressParamsStruct = {
    collateralTokenAddress: string;
    swapTokenAddress: string;
    borrowTokenAddress: string;
  };

  export type TokenAddressParamsStructOutput = [string, string, string] & {
    collateralTokenAddress: string;
    swapTokenAddress: string;
    borrowTokenAddress: string;
  };
}

export interface IAPHCoreInterface extends utils.Interface {
  contractName: "IAPHCore";
  functions: {
    "addLossInUSD(uint256,uint256)": FunctionFragment;
    "adjustCollateral(uint256,uint256,uint256,bool)": FunctionFragment;
    "advancedInterestDuration()": FunctionFragment;
    "assetToPool(address)": FunctionFragment;
    "auctionSpread()": FunctionFragment;
    "borrow(uint256,uint256,uint256,address,uint256,address,uint256,uint256)": FunctionFragment;
    "checkStakingAmountSufficient(uint256,uint256,address)": FunctionFragment;
    "closePosition(uint256,uint256,uint256)": FunctionFragment;
    "coreBorrowingAddress()": FunctionFragment;
    "coreFutureClosingAddress()": FunctionFragment;
    "coreFutureOpeningAddress()": FunctionFragment;
    "coreSettingAddress()": FunctionFragment;
    "coreSwappingAddress()": FunctionFragment;
    "currentLoanIndex(uint256)": FunctionFragment;
    "currentPositionIndex(uint256)": FunctionFragment;
    "depositCollateral(uint256,address,address,uint256)": FunctionFragment;
    "feeSpread()": FunctionFragment;
    "feeVaultAddress()": FunctionFragment;
    "forwAddress()": FunctionFragment;
    "forwLendingDistributionPerBlock(address)": FunctionFragment;
    "forwLendingVaultAddress()": FunctionFragment;
    "forwStakingMultiplier()": FunctionFragment;
    "forwTradingVaultAddress()": FunctionFragment;
    "getAmounts(bool,bool,uint256,uint256,address,address)": FunctionFragment;
    "getAmountsWithRouterSelection(bool,bytes32,uint256,address,address,uint256,uint256)": FunctionFragment;
    "getLoanCurrentLTV(uint256,uint256)": FunctionFragment;
    "getPoolList()": FunctionFragment;
    "getPositionMargin(uint256,bytes32,bool)": FunctionFragment;
    "getRouters()": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "lastSettleForw(address)": FunctionFragment;
    "liquidate(uint256,uint256)": FunctionFragment;
    "liquidatePosition(uint256,bytes32)": FunctionFragment;
    "liquidationFee()": FunctionFragment;
    "loanConfigs(address,address)": FunctionFragment;
    "loanDuration()": FunctionFragment;
    "loanExts(uint256,uint256)": FunctionFragment;
    "loans(uint256,uint256)": FunctionFragment;
    "maximumLeverage()": FunctionFragment;
    "membershipAddress()": FunctionFragment;
    "nextForwLendingDistributionPerBlock(address)": FunctionFragment;
    "nftsLossInUSD(uint256)": FunctionFragment;
    "openPosition((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),(address,address,address))": FunctionFragment;
    "pairs(bytes32)": FunctionFragment;
    "pause(bytes4)": FunctionFragment;
    "poolList(uint256)": FunctionFragment;
    "poolStats(address)": FunctionFragment;
    "poolToAsset(address)": FunctionFragment;
    "positionConfigs(bytes32)": FunctionFragment;
    "positionStates(uint256,uint256)": FunctionFragment;
    "positions(uint256,bytes32)": FunctionFragment;
    "priceFeedAddress()": FunctionFragment;
    "repay(uint256,uint256,uint256,bool)": FunctionFragment;
    "rollover(uint256,uint256)": FunctionFragment;
    "routers(uint256)": FunctionFragment;
    "settleBorrowInterest(uint256,uint256)": FunctionFragment;
    "settleForwInterest()": FunctionFragment;
    "swapConfigs(address,bytes32)": FunctionFragment;
    "swapFeeRates(address)": FunctionFragment;
    "swapableToken(address)": FunctionFragment;
    "tokenPrecisionUnit(address)": FunctionFragment;
    "totalCollateralHold(address)": FunctionFragment;
    "totalLossInUSD()": FunctionFragment;
    "tradingCollateralWhitelist(address)": FunctionFragment;
    "tradingFeeToLender()": FunctionFragment;
    "unPause(bytes4)": FunctionFragment;
    "wallets(uint256,bytes32)": FunctionFragment;
    "wethHandler()": FunctionFragment;
    "withdrawCollateral(uint256,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLossInUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustCollateral",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "advancedInterestDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetToPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "auctionSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkStakingAmountSufficient",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coreBorrowingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreFutureClosingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreFutureOpeningAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreSettingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreSwappingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentLoanIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPositionIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeSpread", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwLendingDistributionPerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "forwLendingVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwStakingMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwTradingVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmounts",
    values: [boolean, boolean, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsWithRouterSelection",
    values: [
      boolean,
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanCurrentLTV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMargin",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastSettleForw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanConfigs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "loanDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanExts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loans",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "membershipAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextForwLendingDistributionPerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftsLossInUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      APHLibrary.OpenPositionParamsStruct,
      APHLibrary.TokenAddressParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pause", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "poolList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolStats", values: [string]): string;
  encodeFunctionData(functionFragment: "poolToAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positionConfigs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "positionStates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "rollover",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "routers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBorrowInterest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleForwInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapConfigs",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrecisionUnit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralHold",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLossInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingCollateralWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFeeToLender",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unPause", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "wallets",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wethHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLossInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advancedInterestDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkStakingAmountSufficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreBorrowingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreFutureClosingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreFutureOpeningAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreSettingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreSwappingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLoanIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPositionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeSpread", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwLendingDistributionPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwLendingVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwStakingMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwTradingVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAmounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsWithRouterSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanCurrentLTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSettleForw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanExts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "membershipAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextForwLendingDistributionPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftsLossInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolToAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBorrowInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleForwInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrecisionUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLossInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingCollateralWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingFeeToLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAPHCore extends BaseContract {
  contractName: "IAPHCore";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAPHCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLossInUSD(
      nftId: BigNumberish,
      lossAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustCollateral(
      loanId: BigNumberish,
      nftId: BigNumberish,
      collateralAdjustAmount: BigNumberish,
      isAdd: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    advancedInterestDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    assetToPool(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    auctionSpread(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      loanId: BigNumberish,
      nftId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralSentAmount: BigNumberish,
      collateralTokenAddress: string,
      newOwedPerDay: BigNumberish,
      interestRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkStakingAmountSufficient(
      nftId: BigNumberish,
      newAmount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closePosition(
      nftId: BigNumberish,
      posId: BigNumberish,
      _closingSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coreBorrowingAddress(overrides?: CallOverrides): Promise<[string]>;

    coreFutureClosingAddress(overrides?: CallOverrides): Promise<[string]>;

    coreFutureOpeningAddress(overrides?: CallOverrides): Promise<[string]>;

    coreSettingAddress(overrides?: CallOverrides): Promise<[string]>;

    coreSwappingAddress(overrides?: CallOverrides): Promise<[string]>;

    currentLoanIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPositionIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeSpread(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    forwAddress(overrides?: CallOverrides): Promise<[string]>;

    forwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forwLendingVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    forwStakingMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    forwTradingVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    getAmounts(
      isExactOutput: boolean,
      extractSwapFee: boolean,
      routerIndex: BigNumberish,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string] & {
        amounts: BigNumber[];
        swapFee: BigNumber;
        router: string;
      }
    >;

    getAmountsWithRouterSelection(
      isExactOutput: boolean,
      pairByte: BytesLike,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string] & {
        amounts: BigNumber[];
        swapFee: BigNumber;
        router: string;
      }
    >;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolList(overrides?: CallOverrides): Promise<[string[]]>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLiquidate: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    getRouters(
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string]]>;

    isPool(poolAddress: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastSettleForw(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanConfigs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[CoreBase.LoanConfigStructOutput]>;

    loanDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanExts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CoreBase.LoanExtStructOutput]>;

    loans(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CoreBase.LoanStructOutput]>;

    maximumLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    membershipAddress(overrides?: CallOverrides): Promise<[string]>;

    nextForwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[CoreBase.NextForwLendingDistributionPerBlockStructOutput]>;

    nftsLossInUSD(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openPosition(
      params: APHLibrary.OpenPositionParamsStruct,
      addressParams: APHLibrary.TokenAddressParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[CoreBase.PairStructOutput]>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    poolStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[CoreBase.PoolStatStructOutput]>;

    poolToAsset(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    positionConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[CoreBase.PositionConfigStructOutput]>;

    positionStates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CoreBase.PositionStateStructOutput]>;

    positions(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[CoreBase.PositionStructOutput]>;

    priceFeedAddress(overrides?: CallOverrides): Promise<[string]>;

    repay(
      loanId: BigNumberish,
      nftId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollover(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    settleBorrowInterest(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleForwInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapConfigs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[CoreBase.SwapConfigStructOutput]>;

    swapFeeRates(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapableToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    tokenPrecisionUnit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalCollateralHold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLossInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingCollateralWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tradingFeeToLender(overrides?: CallOverrides): Promise<[BigNumber]>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wallets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wethHandler(overrides?: CallOverrides): Promise<[string]>;

    withdrawCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLossInUSD(
    nftId: BigNumberish,
    lossAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustCollateral(
    loanId: BigNumberish,
    nftId: BigNumberish,
    collateralAdjustAmount: BigNumberish,
    isAdd: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  advancedInterestDuration(overrides?: CallOverrides): Promise<BigNumber>;

  assetToPool(arg0: string, overrides?: CallOverrides): Promise<string>;

  auctionSpread(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    loanId: BigNumberish,
    nftId: BigNumberish,
    borrowAmount: BigNumberish,
    borrowTokenAddress: string,
    collateralSentAmount: BigNumberish,
    collateralTokenAddress: string,
    newOwedPerDay: BigNumberish,
    interestRate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkStakingAmountSufficient(
    nftId: BigNumberish,
    newAmount: BigNumberish,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closePosition(
    nftId: BigNumberish,
    posId: BigNumberish,
    _closingSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coreBorrowingAddress(overrides?: CallOverrides): Promise<string>;

  coreFutureClosingAddress(overrides?: CallOverrides): Promise<string>;

  coreFutureOpeningAddress(overrides?: CallOverrides): Promise<string>;

  coreSettingAddress(overrides?: CallOverrides): Promise<string>;

  coreSwappingAddress(overrides?: CallOverrides): Promise<string>;

  currentLoanIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPositionIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositCollateral(
    nftId: BigNumberish,
    collateralTokenAddress: string,
    underlyingTokenAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeSpread(overrides?: CallOverrides): Promise<BigNumber>;

  feeVaultAddress(overrides?: CallOverrides): Promise<string>;

  forwAddress(overrides?: CallOverrides): Promise<string>;

  forwLendingDistributionPerBlock(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forwLendingVaultAddress(overrides?: CallOverrides): Promise<string>;

  forwStakingMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  forwTradingVaultAddress(overrides?: CallOverrides): Promise<string>;

  getAmounts(
    isExactOutput: boolean,
    extractSwapFee: boolean,
    routerIndex: BigNumberish,
    amountInput: BigNumberish,
    src: string,
    dst: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, string] & {
      amounts: BigNumber[];
      swapFee: BigNumber;
      router: string;
    }
  >;

  getAmountsWithRouterSelection(
    isExactOutput: boolean,
    pairByte: BytesLike,
    amountInput: BigNumberish,
    src: string,
    dst: string,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, string] & {
      amounts: BigNumber[];
      swapFee: BigNumber;
      router: string;
    }
  >;

  getLoanCurrentLTV(
    loanId: BigNumberish,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolList(overrides?: CallOverrides): Promise<string[]>;

  getPositionMargin(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLiquidate: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRouters(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  isPool(poolAddress: string, overrides?: CallOverrides): Promise<boolean>;

  lastSettleForw(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    loanId: BigNumberish,
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  loanConfigs(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<CoreBase.LoanConfigStructOutput>;

  loanDuration(overrides?: CallOverrides): Promise<BigNumber>;

  loanExts(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CoreBase.LoanExtStructOutput>;

  loans(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CoreBase.LoanStructOutput>;

  maximumLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  membershipAddress(overrides?: CallOverrides): Promise<string>;

  nextForwLendingDistributionPerBlock(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<CoreBase.NextForwLendingDistributionPerBlockStructOutput>;

  nftsLossInUSD(
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPosition(
    params: APHLibrary.OpenPositionParamsStruct,
    addressParams: APHLibrary.TokenAddressParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<CoreBase.PairStructOutput>;

  pause(
    _func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  poolStats(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<CoreBase.PoolStatStructOutput>;

  poolToAsset(arg0: string, overrides?: CallOverrides): Promise<string>;

  positionConfigs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<CoreBase.PositionConfigStructOutput>;

  positionStates(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CoreBase.PositionStateStructOutput>;

  positions(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<CoreBase.PositionStructOutput>;

  priceFeedAddress(overrides?: CallOverrides): Promise<string>;

  repay(
    loanId: BigNumberish,
    nftId: BigNumberish,
    repayAmount: BigNumberish,
    isOnlyInterest: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollover(
    loanId: BigNumberish,
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  settleBorrowInterest(
    loanId: BigNumberish,
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleForwInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapConfigs(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<CoreBase.SwapConfigStructOutput>;

  swapFeeRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapableToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  tokenPrecisionUnit(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalCollateralHold(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLossInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  tradingCollateralWhitelist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tradingFeeToLender(overrides?: CallOverrides): Promise<BigNumber>;

  unPause(
    _func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wallets(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wethHandler(overrides?: CallOverrides): Promise<string>;

  withdrawCollateral(
    nftId: BigNumberish,
    collateralTokenAddress: string,
    underlyingTokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLossInUSD(
      nftId: BigNumberish,
      lossAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustCollateral(
      loanId: BigNumberish,
      nftId: BigNumberish,
      collateralAdjustAmount: BigNumberish,
      isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<CoreBase.LoanStructOutput>;

    advancedInterestDuration(overrides?: CallOverrides): Promise<BigNumber>;

    assetToPool(arg0: string, overrides?: CallOverrides): Promise<string>;

    auctionSpread(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loanId: BigNumberish,
      nftId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralSentAmount: BigNumberish,
      collateralTokenAddress: string,
      newOwedPerDay: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CoreBase.LoanStructOutput>;

    checkStakingAmountSufficient(
      nftId: BigNumberish,
      newAmount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      nftId: BigNumberish,
      posId: BigNumberish,
      _closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    coreBorrowingAddress(overrides?: CallOverrides): Promise<string>;

    coreFutureClosingAddress(overrides?: CallOverrides): Promise<string>;

    coreFutureOpeningAddress(overrides?: CallOverrides): Promise<string>;

    coreSettingAddress(overrides?: CallOverrides): Promise<string>;

    coreSwappingAddress(overrides?: CallOverrides): Promise<string>;

    currentLoanIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPositionIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeSpread(overrides?: CallOverrides): Promise<BigNumber>;

    feeVaultAddress(overrides?: CallOverrides): Promise<string>;

    forwAddress(overrides?: CallOverrides): Promise<string>;

    forwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwLendingVaultAddress(overrides?: CallOverrides): Promise<string>;

    forwStakingMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    forwTradingVaultAddress(overrides?: CallOverrides): Promise<string>;

    getAmounts(
      isExactOutput: boolean,
      extractSwapFee: boolean,
      routerIndex: BigNumberish,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string] & {
        amounts: BigNumber[];
        swapFee: BigNumber;
        router: string;
      }
    >;

    getAmountsWithRouterSelection(
      isExactOutput: boolean,
      pairByte: BytesLike,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string] & {
        amounts: BigNumber[];
        swapFee: BigNumber;
        router: string;
      }
    >;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolList(overrides?: CallOverrides): Promise<string[]>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLiquidate: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouters(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    isPool(poolAddress: string, overrides?: CallOverrides): Promise<boolean>;

    lastSettleForw(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        repayBorrow: BigNumber;
        repayInterest: BigNumber;
        bountyReward: BigNumber;
        leftOverCollateral: BigNumber;
      }
    >;

    liquidatePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    loanConfigs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<CoreBase.LoanConfigStructOutput>;

    loanDuration(overrides?: CallOverrides): Promise<BigNumber>;

    loanExts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CoreBase.LoanExtStructOutput>;

    loans(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CoreBase.LoanStructOutput>;

    maximumLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    membershipAddress(overrides?: CallOverrides): Promise<string>;

    nextForwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<CoreBase.NextForwLendingDistributionPerBlockStructOutput>;

    nftsLossInUSD(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      params: APHLibrary.OpenPositionParamsStruct,
      addressParams: APHLibrary.TokenAddressParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    pairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<CoreBase.PairStructOutput>;

    pause(_func: BytesLike, overrides?: CallOverrides): Promise<void>;

    poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    poolStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<CoreBase.PoolStatStructOutput>;

    poolToAsset(arg0: string, overrides?: CallOverrides): Promise<string>;

    positionConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<CoreBase.PositionConfigStructOutput>;

    positionStates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CoreBase.PositionStateStructOutput>;

    positions(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<CoreBase.PositionStructOutput>;

    priceFeedAddress(overrides?: CallOverrides): Promise<string>;

    repay(
      loanId: BigNumberish,
      nftId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        borrowPaid: BigNumber;
        interestPaid: BigNumber;
      }
    >;

    rollover(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        delayInterest: BigNumber;
        collateralBountyReward: BigNumber;
      }
    >;

    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    settleBorrowInterest(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleForwInterest(overrides?: CallOverrides): Promise<void>;

    swapConfigs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<CoreBase.SwapConfigStructOutput>;

    swapFeeRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapableToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    tokenPrecisionUnit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateralHold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLossInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    tradingCollateralWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tradingFeeToLender(overrides?: CallOverrides): Promise<BigNumber>;

    unPause(_func: BytesLike, overrides?: CallOverrides): Promise<void>;

    wallets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethHandler(overrides?: CallOverrides): Promise<string>;

    withdrawCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLossInUSD(
      nftId: BigNumberish,
      lossAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustCollateral(
      loanId: BigNumberish,
      nftId: BigNumberish,
      collateralAdjustAmount: BigNumberish,
      isAdd: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    advancedInterestDuration(overrides?: CallOverrides): Promise<BigNumber>;

    assetToPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    auctionSpread(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loanId: BigNumberish,
      nftId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralSentAmount: BigNumberish,
      collateralTokenAddress: string,
      newOwedPerDay: BigNumberish,
      interestRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkStakingAmountSufficient(
      nftId: BigNumberish,
      newAmount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      nftId: BigNumberish,
      posId: BigNumberish,
      _closingSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coreBorrowingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    coreFutureClosingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    coreFutureOpeningAddress(overrides?: CallOverrides): Promise<BigNumber>;

    coreSettingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    coreSwappingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    currentLoanIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPositionIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeSpread(overrides?: CallOverrides): Promise<BigNumber>;

    feeVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    forwAddress(overrides?: CallOverrides): Promise<BigNumber>;

    forwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwLendingVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    forwStakingMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    forwTradingVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAmounts(
      isExactOutput: boolean,
      extractSwapFee: boolean,
      routerIndex: BigNumberish,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsWithRouterSelection(
      isExactOutput: boolean,
      pairByte: BytesLike,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolList(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLiquidate: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouters(overrides?: CallOverrides): Promise<BigNumber>;

    isPool(poolAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastSettleForw(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    loanConfigs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanDuration(overrides?: CallOverrides): Promise<BigNumber>;

    loanExts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    membershipAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nextForwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftsLossInUSD(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      params: APHLibrary.OpenPositionParamsStruct,
      addressParams: APHLibrary.TokenAddressParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolToAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    positionConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionStates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedAddress(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      loanId: BigNumberish,
      nftId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollover(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    settleBorrowInterest(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleForwInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapConfigs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFeeRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapableToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrecisionUnit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateralHold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLossInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    tradingCollateralWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradingFeeToLender(overrides?: CallOverrides): Promise<BigNumber>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wallets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethHandler(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLossInUSD(
      nftId: BigNumberish,
      lossAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustCollateral(
      loanId: BigNumberish,
      nftId: BigNumberish,
      collateralAdjustAmount: BigNumberish,
      isAdd: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    advancedInterestDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetToPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionSpread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      loanId: BigNumberish,
      nftId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralSentAmount: BigNumberish,
      collateralTokenAddress: string,
      newOwedPerDay: BigNumberish,
      interestRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkStakingAmountSufficient(
      nftId: BigNumberish,
      newAmount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      nftId: BigNumberish,
      posId: BigNumberish,
      _closingSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coreBorrowingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreFutureClosingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreFutureOpeningAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreSettingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreSwappingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentLoanIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPositionIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeSpread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeVaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwLendingVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwStakingMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwTradingVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmounts(
      isExactOutput: boolean,
      extractSwapFee: boolean,
      routerIndex: BigNumberish,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsWithRouterSelection(
      isExactOutput: boolean,
      pairByte: BytesLike,
      amountInput: BigNumberish,
      src: string,
      dst: string,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLiquidate: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPool(
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSettleForw(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanConfigs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanExts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    membershipAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextForwLendingDistributionPerBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsLossInUSD(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: APHLibrary.OpenPositionParamsStruct,
      addressParams: APHLibrary.TokenAddressParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolToAsset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionStates(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      loanId: BigNumberish,
      nftId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollover(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleBorrowInterest(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleForwInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapConfigs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapFeeRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapableToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPrecisionUnit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollateralHold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLossInUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingCollateralWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradingFeeToLender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wallets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
