/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CoreBase {
  export type PositionStruct = {
    id: BigNumberish;
    collateralTokenAddress: string;
    lastSettleTimestamp: BigNumberish;
    borrowTokenAddress: string;
    swapTokenAddress: string;
    entryPrice: BigNumberish;
    contractSize: BigNumberish;
    borrowAmount: BigNumberish;
    collateralSwappedAmount: BigNumberish;
    interestOwed: BigNumberish;
    interestOwePerDay: BigNumberish;
  };

  export type PositionStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    collateralTokenAddress: string;
    lastSettleTimestamp: BigNumber;
    borrowTokenAddress: string;
    swapTokenAddress: string;
    entryPrice: BigNumber;
    contractSize: BigNumber;
    borrowAmount: BigNumber;
    collateralSwappedAmount: BigNumber;
    interestOwed: BigNumber;
    interestOwePerDay: BigNumber;
  };

  export type PositionStateStruct = {
    active: boolean;
    isLong: boolean;
    PNL: BigNumberish;
    startTimestamp: BigNumberish;
    pairByte: BytesLike;
    averageEntryPrice: BigNumberish;
    interestPaid: BigNumberish;
    totalTradingFee: BigNumberish;
    totalSwapFee: BigNumberish;
  };

  export type PositionStateStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    active: boolean;
    isLong: boolean;
    PNL: BigNumber;
    startTimestamp: BigNumber;
    pairByte: string;
    averageEntryPrice: BigNumber;
    interestPaid: BigNumber;
    totalTradingFee: BigNumber;
    totalSwapFee: BigNumber;
  };
}

export declare namespace HelperBase {
  export type PositionDataStruct = {
    position: CoreBase.PositionStruct;
    PNL: BigNumberish;
    ROE: BigNumberish;
    margin: BigNumberish;
    rate: BigNumberish;
    liqPrice: BigNumberish;
  };

  export type PositionDataStructOutput = [
    CoreBase.PositionStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    position: CoreBase.PositionStructOutput;
    PNL: BigNumber;
    ROE: BigNumber;
    margin: BigNumber;
    rate: BigNumber;
    liqPrice: BigNumber;
  };
}

export interface IHelperFutureTradeInterface extends utils.Interface {
  contractName: "IHelperFutureTrade";
  functions: {
    "getAllActivePositions(uint256)": FunctionFragment;
    "getAveragePrice(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getBalanceAfterOpenPosition(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getBalanceDetails(uint256,bytes32)": FunctionFragment;
    "getClosingFee(uint256,bytes32,uint256)": FunctionFragment;
    "getEntryPrice(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getLiqPriceAfterOpenPosition(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getLiquidationPrice(uint256,bytes32)": FunctionFragment;
    "getMarginAfterAdjustCollateral(uint256,bytes32,bool,uint256)": FunctionFragment;
    "getMarginAfterClosePosition(uint256,bytes32,uint256)": FunctionFragment;
    "getMarginAfterOpenPosition(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getMaxContractSize(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getMaxWithdrawal(uint256,bytes32)": FunctionFragment;
    "getOpeningFee(uint256,bytes32,bool,uint256,uint256,uint256)": FunctionFragment;
    "getPNLAfterClosePosition(uint256,bytes32,uint256)": FunctionFragment;
    "getPositionMargin(uint256,bytes32)": FunctionFragment;
    "getPositionStates(uint256,uint256,uint256)": FunctionFragment;
    "getRequiredCollateral(uint256,bytes32,bool,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getUnrealizedPNL(uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllActivePositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAveragePrice",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceAfterOpenPosition",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceDetails",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClosingFee",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryPrice",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiqPriceAfterOpenPosition",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAfterAdjustCollateral",
    values: [BigNumberish, BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAfterClosePosition",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAfterOpenPosition",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxContractSize",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWithdrawal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningFee",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPNLAfterClosePosition",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMargin",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionStates",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredCollateral",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPNL",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllActivePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceAfterOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiqPriceAfterOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAfterAdjustCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAfterClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAfterOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxContractSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPNLAfterClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPNL",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHelperFutureTrade extends BaseContract {
  contractName: "IHelperFutureTrade";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHelperFutureTradeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllActivePositions(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [HelperBase.PositionDataStructOutput[]] & {
        data: HelperBase.PositionDataStructOutput[];
      }
    >;

    getAveragePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { averagePrice: BigNumber }>;

    getBalanceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getBalanceDetails(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        freeBalance: BigNumber;
        usedBalance: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getClosingFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      contractSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        swapFee: BigNumber;
        tradingFee: BigNumber;
        totalFee: BigNumber;
      }
    >;

    getEntryPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        entryPrice: BigNumber;
        swapFee: BigNumber;
        swapSize: BigNumber;
      }
    >;

    getLiqPriceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidationPrice: BigNumber }>;

    getLiquidationPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidationPrice: BigNumber }>;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isAdd: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    getMarginAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    getMaxContractSize(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxContractSize: BigNumber }>;

    getMaxWithdrawal(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxWithdrawal: BigNumber }>;

    getOpeningFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        swapFee: BigNumber;
        tradingFee: BigNumber;
        totalFee: BigNumber;
      }
    >;

    getPNLAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { PNL: BigNumber; ROE: BigNumber }>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CoreBase.PositionStateStructOutput[], BigNumber] & {
        positionStates: CoreBase.PositionStateStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getRequiredCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateral: BigNumber }>;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { PNL: BigNumber; ROE: BigNumber }>;
  };

  getAllActivePositions(
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<HelperBase.PositionDataStructOutput[]>;

  getAveragePrice(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalanceAfterOpenPosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalanceDetails(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      freeBalance: BigNumber;
      usedBalance: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getClosingFee(
    nftId: BigNumberish,
    pairByte: BytesLike,
    contractSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      swapFee: BigNumber;
      tradingFee: BigNumber;
      totalFee: BigNumber;
    }
  >;

  getEntryPrice(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      entryPrice: BigNumber;
      swapFee: BigNumber;
      swapSize: BigNumber;
    }
  >;

  getLiqPriceAfterOpenPosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidationPrice(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarginAfterAdjustCollateral(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isAdd: boolean,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarginAfterClosePosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    closingSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarginAfterOpenPosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxContractSize(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    leverage: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxWithdrawal(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpeningFee(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      swapFee: BigNumber;
      tradingFee: BigNumber;
      totalFee: BigNumber;
    }
  >;

  getPNLAfterClosePosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    closingSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { PNL: BigNumber; ROE: BigNumber }>;

  getPositionMargin(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionStates(
    nftId: BigNumberish,
    cursor: BigNumberish,
    resultsPerPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [CoreBase.PositionStateStructOutput[], BigNumber] & {
      positionStates: CoreBase.PositionStateStructOutput[];
      newCursor: BigNumber;
    }
  >;

  getRequiredCollateral(
    nftId: BigNumberish,
    pairByte: BytesLike,
    isLong: boolean,
    contractSize: BigNumberish,
    leverage: BigNumberish,
    expectedRate: BigNumberish,
    slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnrealizedPNL(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { PNL: BigNumber; ROE: BigNumber }>;

  callStatic: {
    getAllActivePositions(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HelperBase.PositionDataStructOutput[]>;

    getAveragePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceDetails(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        freeBalance: BigNumber;
        usedBalance: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getClosingFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      contractSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        swapFee: BigNumber;
        tradingFee: BigNumber;
        totalFee: BigNumber;
      }
    >;

    getEntryPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        entryPrice: BigNumber;
        swapFee: BigNumber;
        swapSize: BigNumber;
      }
    >;

    getLiqPriceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isAdd: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxContractSize(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxWithdrawal(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        swapFee: BigNumber;
        tradingFee: BigNumber;
        totalFee: BigNumber;
      }
    >;

    getPNLAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { PNL: BigNumber; ROE: BigNumber }>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CoreBase.PositionStateStructOutput[], BigNumber] & {
        positionStates: CoreBase.PositionStateStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getRequiredCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { PNL: BigNumber; ROE: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    getAllActivePositions(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAveragePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceDetails(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosingFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      contractSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiqPriceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isAdd: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxContractSize(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxWithdrawal(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPNLAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllActivePositions(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAveragePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceDetails(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClosingFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      contractSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiqPriceAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isAdd: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAfterOpenPosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxContractSize(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxWithdrawal(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpeningFee(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPNLAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionMargin(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredCollateral(
      nftId: BigNumberish,
      pairByte: BytesLike,
      isLong: boolean,
      contractSize: BigNumberish,
      leverage: BigNumberish,
      expectedRate: BigNumberish,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
