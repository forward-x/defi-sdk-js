/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CoreBase {
  export type PositionStruct = {
    entryPrice: BigNumberish;
    lastSettleTimestamp: BigNumberish;
    collateralTokenAddress: string;
    id: BigNumberish;
    swapTokenAddress: string;
    borrowTokenAddress: string;
    collateralSwappedAmount: BigNumberish;
    borrowAmount: BigNumberish;
    contractSize: BigNumberish;
    interestOwePerDay: BigNumberish;
    interestOwed: BigNumberish;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    entryPrice: BigNumber;
    lastSettleTimestamp: BigNumber;
    collateralTokenAddress: string;
    id: BigNumber;
    swapTokenAddress: string;
    borrowTokenAddress: string;
    collateralSwappedAmount: BigNumber;
    borrowAmount: BigNumber;
    contractSize: BigNumber;
    interestOwePerDay: BigNumber;
    interestOwed: BigNumber;
  };

  export type PositionStateStruct = {
    active: boolean;
    isLong: boolean;
    PNL: BigNumberish;
    startTimestamp: BigNumberish;
    pairByte: BytesLike;
    averageEntryPrice: BigNumberish;
    interestPaid: BigNumberish;
  };

  export type PositionStateStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    active: boolean;
    isLong: boolean;
    PNL: BigNumber;
    startTimestamp: BigNumber;
    pairByte: string;
    averageEntryPrice: BigNumber;
    interestPaid: BigNumber;
  };
}

export declare namespace HelperBase {
  export type PositionDataStruct = {
    position: CoreBase.PositionStruct;
    margin: BigNumberish;
    liqPrice: BigNumberish;
    pnl: BigNumberish;
    rate: BigNumberish;
    percentPNL: BigNumberish;
  };

  export type PositionDataStructOutput = [
    CoreBase.PositionStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    position: CoreBase.PositionStructOutput;
    margin: BigNumber;
    liqPrice: BigNumber;
    pnl: BigNumber;
    rate: BigNumber;
    percentPNL: BigNumber;
  };
}

export interface IHelperFutureTradeInterface extends utils.Interface {
  contractName: "IHelperFutureTrade";
  functions: {
    "getAllActivePositions(uint256,uint256)": FunctionFragment;
    "getCollateralWalletBalance(uint256,address,address)": FunctionFragment;
    "getLiquidatePrice(uint256,bytes32)": FunctionFragment;
    "getMaxContractSize(uint256,uint256,uint256,uint256,address,address,address,uint256)": FunctionFragment;
    "getPositionStates(uint256,uint256,uint256)": FunctionFragment;
    "getUnrealizedPNL(uint256,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllActivePositions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralWalletBalance",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidatePrice",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxContractSize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionStates",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPNL",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllActivePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralWalletBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxContractSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPNL",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHelperFutureTrade extends BaseContract {
  contractName: "IHelperFutureTrade";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHelperFutureTradeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllActivePositions(
      nftId: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [HelperBase.PositionDataStructOutput[]] & {
        data: HelperBase.PositionDataStructOutput[];
      }
    >;

    getCollateralWalletBalance(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { wallet: BigNumber }>;

    getLiquidatePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liqPrice: BigNumber }>;

    getMaxContractSize(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      slippage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxContractSize: BigNumber }>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CoreBase.PositionStateStructOutput[], BigNumber] & {
        positionStates: CoreBase.PositionStateStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        pnl: BigNumber;
        rate: BigNumber;
        percentPNL: BigNumber;
      }
    >;
  };

  getAllActivePositions(
    nftId: BigNumberish,
    routerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<HelperBase.PositionDataStructOutput[]>;

  getCollateralWalletBalance(
    nftId: BigNumberish,
    collateralTokenAddress: string,
    underlyingTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidatePrice(
    nftId: BigNumberish,
    pairByte: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxContractSize(
    nftId: BigNumberish,
    entryPrice: BigNumberish,
    leverage: BigNumberish,
    slippage: BigNumberish,
    collateralTokenAddress: string,
    swapTokenAddress: string,
    borrowTokenAddress: string,
    routerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionStates(
    nftId: BigNumberish,
    cursor: BigNumberish,
    resultsPerPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [CoreBase.PositionStateStructOutput[], BigNumber] & {
      positionStates: CoreBase.PositionStateStructOutput[];
      newCursor: BigNumber;
    }
  >;

  getUnrealizedPNL(
    nftId: BigNumberish,
    pairByte: BytesLike,
    routerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      pnl: BigNumber;
      rate: BigNumber;
      percentPNL: BigNumber;
    }
  >;

  callStatic: {
    getAllActivePositions(
      nftId: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HelperBase.PositionDataStructOutput[]>;

    getCollateralWalletBalance(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidatePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxContractSize(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      slippage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CoreBase.PositionStateStructOutput[], BigNumber] & {
        positionStates: CoreBase.PositionStateStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        pnl: BigNumber;
        rate: BigNumber;
        percentPNL: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getAllActivePositions(
      nftId: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralWalletBalance(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidatePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxContractSize(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      slippage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllActivePositions(
      nftId: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralWalletBalance(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidatePrice(
      nftId: BigNumberish,
      pairByte: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxContractSize(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      slippage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionStates(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnrealizedPNL(
      nftId: BigNumberish,
      pairByte: BytesLike,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
