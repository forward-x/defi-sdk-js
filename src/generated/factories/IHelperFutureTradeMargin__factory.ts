/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IHelperFutureTradeMargin,
  IHelperFutureTradeMarginInterface,
} from "../IHelperFutureTradeMargin";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entryPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "leverage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "contractSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slipPage",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "swapTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrowTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "routerIndex",
        type: "uint256",
      },
    ],
    name: "getDetailAfterAdjustPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liqPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "wallet",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlyingTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newAmount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isAdd",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "routerIndex",
        type: "uint256",
      },
    ],
    name: "getMarginAfterAdjustCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "pairByte",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "closingSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "routerIndex",
        type: "uint256",
      },
    ],
    name: "getMarginAfterClosePosition",
    outputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "realPNL",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "percentPNL",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IHelperFutureTradeMargin__factory {
  static readonly abi = _abi;
  static createInterface(): IHelperFutureTradeMarginInterface {
    return new utils.Interface(_abi) as IHelperFutureTradeMarginInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IHelperFutureTradeMargin {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IHelperFutureTradeMargin;
  }
}
