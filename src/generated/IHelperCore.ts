/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CoreBase {
  export type LoanStruct = {
    interestPaid: BigNumberish;
    borrowTokenAddress: string;
    rolloverTimestamp: BigNumberish;
    lastSettleTimestamp: BigNumberish;
    collateralTokenAddress: string;
    borrowAmount: BigNumberish;
    collateralAmount: BigNumberish;
    owedPerDay: BigNumberish;
    minInterest: BigNumberish;
    interestOwed: BigNumberish;
  };

  export type LoanStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    interestPaid: BigNumber;
    borrowTokenAddress: string;
    rolloverTimestamp: BigNumber;
    lastSettleTimestamp: BigNumber;
    collateralTokenAddress: string;
    borrowAmount: BigNumber;
    collateralAmount: BigNumber;
    owedPerDay: BigNumber;
    minInterest: BigNumber;
    interestOwed: BigNumber;
  };
}

export declare namespace HelperBase {
  export type ActiveLoanInfoStruct = {
    id: BigNumberish;
    currentLTV: BigNumberish;
    liquidationLTV: BigNumberish;
    apr: BigNumberish;
    minInterestOwed: BigNumberish;
    actualInterestOwed: BigNumberish;
  };

  export type ActiveLoanInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    currentLTV: BigNumber;
    liquidationLTV: BigNumber;
    apr: BigNumber;
    minInterestOwed: BigNumber;
    actualInterestOwed: BigNumber;
  };
}

export interface IHelperCoreInterface extends utils.Interface {
  contractName: "IHelperCore";
  functions: {
    "calculateBorrowAmount(uint256,uint256,uint256,address,uint256,address,uint256)": FunctionFragment;
    "calculateLTVForAdjustColla(uint256,uint256,uint256,bool)": FunctionFragment;
    "calculateLTVForBorrow(uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "calculateLTVForRepay(uint256,uint256,uint256,bool)": FunctionFragment;
    "calculateMaxRepay(uint256,uint256,uint256,bool)": FunctionFragment;
    "getActiveLoans(uint256,uint256,uint256)": FunctionFragment;
    "getLoanBorrowAmount(uint256,uint256)": FunctionFragment;
    "getLoanCollateralInfo(uint256,uint256)": FunctionFragment;
    "getLoanCurrentLTV(uint256,uint256)": FunctionFragment;
    "getPenaltyFee(uint256,uint256)": FunctionFragment;
    "getSettleBorrowInfo(uint256,uint256)": FunctionFragment;
    "isLoanLiquidable(uint256,uint256)": FunctionFragment;
    "isPool(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateBorrowAmount",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLTVForAdjustColla",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLTVForBorrow",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLTVForRepay",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxRepay",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveLoans",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanBorrowAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanCollateralInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanCurrentLTV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettleBorrowInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLoanLiquidable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "calculateBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLTVForAdjustColla",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLTVForBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLTVForRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanCollateralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanCurrentLTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettleBorrowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLoanLiquidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;

  events: {};
}

export interface IHelperCore extends BaseContract {
  contractName: "IHelperCore";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHelperCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxBorrowAmount: BigNumber;
        maxCollateralAmount: BigNumber;
      }
    >;

    calculateLTVForAdjustColla(
      nftId: BigNumberish,
      loanId: BigNumberish,
      amount: BigNumberish,
      isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ltv: BigNumber }>;

    calculateLTVForBorrow(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ltv: BigNumber }>;

    calculateLTVForRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ltv: BigNumber }>;

    calculateMaxRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      gapTimeBorrowInterestSecond: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxRepay: BigNumber }>;

    getActiveLoans(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        CoreBase.LoanStructOutput[],
        HelperBase.ActiveLoanInfoStructOutput[],
        BigNumber[],
        BigNumber
      ] & {
        activeLoans: CoreBase.LoanStructOutput[];
        activeLoanInfos: HelperBase.ActiveLoanInfoStructOutput[];
        interestOwedPerDays: BigNumber[];
        newCursor: BigNumber;
      }
    >;

    getLoanBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maximumBorrowAmount: BigNumber }>;

    getLoanCollateralInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minimumCollateral: BigNumber;
        removableCollateral: BigNumber;
      }
    >;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ltv: BigNumber }>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penaltyFee: BigNumber }>;

    getSettleBorrowInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        settledBorrowAmount: BigNumber;
        settledLTV: BigNumber;
        rate: BigNumber;
        precision: BigNumber;
      }
    >;

    isLoanLiquidable(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPool(poolAddess: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  calculateBorrowAmount(
    nftId: BigNumberish,
    loanId: BigNumberish,
    borrowAmount: BigNumberish,
    borrowTokenAddress: string,
    collateralAmount: BigNumberish,
    collateralTokenAddress: string,
    ltv: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxBorrowAmount: BigNumber;
      maxCollateralAmount: BigNumber;
    }
  >;

  calculateLTVForAdjustColla(
    nftId: BigNumberish,
    loanId: BigNumberish,
    amount: BigNumberish,
    isAdd: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateLTVForBorrow(
    nftId: BigNumberish,
    loanId: BigNumberish,
    borrowAmount: BigNumberish,
    borrowTokenAddress: string,
    collateralAmount: BigNumberish,
    collateralTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateLTVForRepay(
    nftId: BigNumberish,
    loanId: BigNumberish,
    repayAmount: BigNumberish,
    isOnlyInterest: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateMaxRepay(
    nftId: BigNumberish,
    loanId: BigNumberish,
    gapTimeBorrowInterestSecond: BigNumberish,
    isOnlyInterest: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveLoans(
    nftId: BigNumberish,
    cursor: BigNumberish,
    resultsPerPage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      CoreBase.LoanStructOutput[],
      HelperBase.ActiveLoanInfoStructOutput[],
      BigNumber[],
      BigNumber
    ] & {
      activeLoans: CoreBase.LoanStructOutput[];
      activeLoanInfos: HelperBase.ActiveLoanInfoStructOutput[];
      interestOwedPerDays: BigNumber[];
      newCursor: BigNumber;
    }
  >;

  getLoanBorrowAmount(
    nftId: BigNumberish,
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanCollateralInfo(
    nftId: BigNumberish,
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      minimumCollateral: BigNumber;
      removableCollateral: BigNumber;
    }
  >;

  getLoanCurrentLTV(
    loanId: BigNumberish,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPenaltyFee(
    nftId: BigNumberish,
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSettleBorrowInfo(
    nftId: BigNumberish,
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      settledBorrowAmount: BigNumber;
      settledLTV: BigNumber;
      rate: BigNumber;
      precision: BigNumber;
    }
  >;

  isLoanLiquidable(
    nftId: BigNumberish,
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPool(poolAddess: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    calculateBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxBorrowAmount: BigNumber;
        maxCollateralAmount: BigNumber;
      }
    >;

    calculateLTVForAdjustColla(
      nftId: BigNumberish,
      loanId: BigNumberish,
      amount: BigNumberish,
      isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLTVForBorrow(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLTVForRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMaxRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      gapTimeBorrowInterestSecond: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveLoans(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        CoreBase.LoanStructOutput[],
        HelperBase.ActiveLoanInfoStructOutput[],
        BigNumber[],
        BigNumber
      ] & {
        activeLoans: CoreBase.LoanStructOutput[];
        activeLoanInfos: HelperBase.ActiveLoanInfoStructOutput[];
        interestOwedPerDays: BigNumber[];
        newCursor: BigNumber;
      }
    >;

    getLoanBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanCollateralInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minimumCollateral: BigNumber;
        removableCollateral: BigNumber;
      }
    >;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettleBorrowInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        settledBorrowAmount: BigNumber;
        settledLTV: BigNumber;
        rate: BigNumber;
        precision: BigNumber;
      }
    >;

    isLoanLiquidable(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPool(poolAddess: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    calculateBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLTVForAdjustColla(
      nftId: BigNumberish,
      loanId: BigNumberish,
      amount: BigNumberish,
      isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLTVForBorrow(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLTVForRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMaxRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      gapTimeBorrowInterestSecond: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveLoans(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanCollateralInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettleBorrowInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLoanLiquidable(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPool(poolAddess: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLTVForAdjustColla(
      nftId: BigNumberish,
      loanId: BigNumberish,
      amount: BigNumberish,
      isAdd: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLTVForBorrow(
      nftId: BigNumberish,
      loanId: BigNumberish,
      borrowAmount: BigNumberish,
      borrowTokenAddress: string,
      collateralAmount: BigNumberish,
      collateralTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLTVForRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      repayAmount: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateMaxRepay(
      nftId: BigNumberish,
      loanId: BigNumberish,
      gapTimeBorrowInterestSecond: BigNumberish,
      isOnlyInterest: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveLoans(
      nftId: BigNumberish,
      cursor: BigNumberish,
      resultsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanBorrowAmount(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanCollateralInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanCurrentLTV(
      loanId: BigNumberish,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenaltyFee(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettleBorrowInfo(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLoanLiquidable(
      nftId: BigNumberish,
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPool(
      poolAddess: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
