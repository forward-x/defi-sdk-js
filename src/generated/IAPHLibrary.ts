/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IAPHLibraryInterface extends utils.Interface {
  contractName: "IAPHLibrary";
  functions: {
    "addIntToUint(uint256,int256)": FunctionFragment;
    "calculateMargin(uint256,uint256,uint256,int256,uint256,uint256)": FunctionFragment;
    "calculatePNL(uint256,uint256,uint256)": FunctionFragment;
    "hashPair(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addIntToUint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMargin",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePNL",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashPair",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addIntToUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePNL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashPair", data: BytesLike): Result;

  events: {};
}

export interface IAPHLibrary extends BaseContract {
  contractName: "IAPHLibrary";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAPHLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addIntToUint(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateMargin(
      wallet: BigNumberish,
      swappedCollateral: BigNumberish,
      interestOwed: BigNumberish,
      PNL: BigNumberish,
      positionSize: BigNumberish,
      feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    calculatePNL(
      firstValue: BigNumberish,
      secondValue: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashPair(
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pairByte: string }>;
  };

  addIntToUint(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateMargin(
    wallet: BigNumberish,
    swappedCollateral: BigNumberish,
    interestOwed: BigNumberish,
    PNL: BigNumberish,
    positionSize: BigNumberish,
    feeAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePNL(
    firstValue: BigNumberish,
    secondValue: BigNumberish,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashPair(
    collateralTokenAddress: string,
    underlyingTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addIntToUint(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMargin(
      wallet: BigNumberish,
      swappedCollateral: BigNumberish,
      interestOwed: BigNumberish,
      PNL: BigNumberish,
      positionSize: BigNumberish,
      feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePNL(
      firstValue: BigNumberish,
      secondValue: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashPair(
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addIntToUint(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMargin(
      wallet: BigNumberish,
      swappedCollateral: BigNumberish,
      interestOwed: BigNumberish,
      PNL: BigNumberish,
      positionSize: BigNumberish,
      feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePNL(
      firstValue: BigNumberish,
      secondValue: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashPair(
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addIntToUint(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateMargin(
      wallet: BigNumberish,
      swappedCollateral: BigNumberish,
      interestOwed: BigNumberish,
      PNL: BigNumberish,
      positionSize: BigNumberish,
      feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePNL(
      firstValue: BigNumberish,
      secondValue: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashPair(
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
