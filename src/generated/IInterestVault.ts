/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IInterestVaultInterface extends utils.Interface {
  contractName: "IInterestVault";
  functions: {
    "actualTokenInterestProfit()": FunctionFragment;
    "claimableForwInterest()": FunctionFragment;
    "claimableTokenInterest()": FunctionFragment;
    "cumulativeTokenInterestProfit()": FunctionFragment;
    "forwAddress()": FunctionFragment;
    "getTotalForwInterest()": FunctionFragment;
    "getTotalTokenInterest()": FunctionFragment;
    "heldTokenInterest()": FunctionFragment;
    "ownerApprove(address,uint256,uint256)": FunctionFragment;
    "pause(bytes4)": FunctionFragment;
    "protocolAddress()": FunctionFragment;
    "setForwAddress(address)": FunctionFragment;
    "setProtocolAddress(address)": FunctionFragment;
    "setTokenAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "settleInterest(uint256,uint256,uint256)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "unPause(bytes4)": FunctionFragment;
    "withdrawActualProfit()": FunctionFragment;
    "withdrawForwInterest(uint256)": FunctionFragment;
    "withdrawTokenInterest(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "actualTokenInterestProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableForwInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableTokenInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeTokenInterestProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalForwInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "heldTokenInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerApprove",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "protocolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setForwAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unPause", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawActualProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForwInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "actualTokenInterestProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableForwInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableTokenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeTokenInterestProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalForwInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "heldTokenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForwAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawActualProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForwInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenInterest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IInterestVault extends BaseContract {
  contractName: "IInterestVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInterestVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    actualTokenInterestProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableForwInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableTokenInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeTokenInterestProfit(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forwAddress(overrides?: CallOverrides): Promise<[string]>;

    getTotalForwInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalTokenInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    heldTokenInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerApprove(
      _pool: string,
      tokenApproveAmount: BigNumberish,
      forwApproveAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolAddress(overrides?: CallOverrides): Promise<[string]>;

    setForwAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleInterest(
      _claimableTokenInterest: BigNumberish,
      _heldTokenInterest: BigNumberish,
      _claimableForwInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawActualProfit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawForwInterest(
      claimable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenInterest(
      claimable: BigNumberish,
      bonus: BigNumberish,
      profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  actualTokenInterestProfit(overrides?: CallOverrides): Promise<BigNumber>;

  claimableForwInterest(overrides?: CallOverrides): Promise<BigNumber>;

  claimableTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeTokenInterestProfit(overrides?: CallOverrides): Promise<BigNumber>;

  forwAddress(overrides?: CallOverrides): Promise<string>;

  getTotalForwInterest(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

  heldTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

  ownerApprove(
    _pool: string,
    tokenApproveAmount: BigNumberish,
    forwApproveAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    _func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolAddress(overrides?: CallOverrides): Promise<string>;

  setForwAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleInterest(
    _claimableTokenInterest: BigNumberish,
    _heldTokenInterest: BigNumberish,
    _claimableForwInterest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  unPause(
    _func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawActualProfit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawForwInterest(
    claimable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenInterest(
    claimable: BigNumberish,
    bonus: BigNumberish,
    profit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    actualTokenInterestProfit(overrides?: CallOverrides): Promise<BigNumber>;

    claimableForwInterest(overrides?: CallOverrides): Promise<BigNumber>;

    claimableTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeTokenInterestProfit(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwAddress(overrides?: CallOverrides): Promise<string>;

    getTotalForwInterest(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    heldTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    ownerApprove(
      _pool: string,
      tokenApproveAmount: BigNumberish,
      forwApproveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(_func: BytesLike, overrides?: CallOverrides): Promise<void>;

    protocolAddress(overrides?: CallOverrides): Promise<string>;

    setForwAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    setProtocolAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    setTreasuryAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleInterest(
      _claimableTokenInterest: BigNumberish,
      _heldTokenInterest: BigNumberish,
      _claimableForwInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    unPause(_func: BytesLike, overrides?: CallOverrides): Promise<void>;

    withdrawActualProfit(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawForwInterest(
      claimable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenInterest(
      claimable: BigNumberish,
      bonus: BigNumberish,
      profit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    actualTokenInterestProfit(overrides?: CallOverrides): Promise<BigNumber>;

    claimableForwInterest(overrides?: CallOverrides): Promise<BigNumber>;

    claimableTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeTokenInterestProfit(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forwAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalForwInterest(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    heldTokenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    ownerApprove(
      _pool: string,
      tokenApproveAmount: BigNumberish,
      forwApproveAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setForwAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleInterest(
      _claimableTokenInterest: BigNumberish,
      _heldTokenInterest: BigNumberish,
      _claimableForwInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawActualProfit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawForwInterest(
      claimable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokenInterest(
      claimable: BigNumberish,
      bonus: BigNumberish,
      profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    actualTokenInterestProfit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableForwInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableTokenInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeTokenInterestProfit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalForwInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heldTokenInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerApprove(
      _pool: string,
      tokenApproveAmount: BigNumberish,
      forwApproveAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setForwAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleInterest(
      _claimableTokenInterest: BigNumberish,
      _heldTokenInterest: BigNumberish,
      _claimableForwInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawActualProfit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForwInterest(
      claimable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenInterest(
      claimable: BigNumberish,
      bonus: BigNumberish,
      profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
