/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StakePoolBase {
  export type StakeInfoStruct = {
    stakeBalance: BigNumberish;
    claimableAmount: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    lastSettleTimestamp: BigNumberish;
    payPattern: BigNumberish[];
  };

  export type StakeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    stakeBalance: BigNumber;
    claimableAmount: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    lastSettleTimestamp: BigNumber;
    payPattern: BigNumber[];
  };

  export type RankInfoStruct = {
    interestBonusLending: BigNumberish;
    forwardBonusLending: BigNumberish;
    minimumStakeAmount: BigNumberish;
    maxLTVBonus: BigNumberish;
    tradingFee: BigNumberish;
    tradingBonus: BigNumberish;
  };

  export type RankInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    interestBonusLending: BigNumber;
    forwardBonusLending: BigNumber;
    minimumStakeAmount: BigNumber;
    maxLTVBonus: BigNumber;
    tradingFee: BigNumber;
    tradingBonus: BigNumber;
  };
}

export interface IStakePoolInterface extends utils.Interface {
  contractName: "IStakePool";
  functions: {
    "deprecateStakeInfo(uint256)": FunctionFragment;
    "forwAddress()": FunctionFragment;
    "getMaxLTVBonus(uint256)": FunctionFragment;
    "getStakeInfo(uint256)": FunctionFragment;
    "membershipAddress()": FunctionFragment;
    "migrate(uint256)": FunctionFragment;
    "nextPoolAddress()": FunctionFragment;
    "pause(bytes4)": FunctionFragment;
    "poolStartTimestamp()": FunctionFragment;
    "rankInfos(uint8)": FunctionFragment;
    "rankLen()": FunctionFragment;
    "setNextPool(address)": FunctionFragment;
    "setPoolStartTimestamp(uint64)": FunctionFragment;
    "setRankInfo(uint256[],uint256[],uint256[],uint256[],uint256[],uint256[])": FunctionFragment;
    "setSettleInterval(uint256)": FunctionFragment;
    "settleInterval()": FunctionFragment;
    "settlePeriod()": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "stakeInfos(uint256)": FunctionFragment;
    "stakeVaultAddress()": FunctionFragment;
    "totalStakeAmount()": FunctionFragment;
    "unPause(bytes4)": FunctionFragment;
    "unstake(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deprecateStakeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLTVBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "poolStartTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rankInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rankLen", values?: undefined): string;
  encodeFunctionData(functionFragment: "setNextPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPoolStartTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRankInfo",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettleInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unPause", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deprecateStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLTVBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "membershipAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rankInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rankLen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNextPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRankInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettleInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export interface IStakePool extends BaseContract {
  contractName: "IStakePool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deprecateStakeInfo(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forwAddress(overrides?: CallOverrides): Promise<[string]>;

    getMaxLTVBonus(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeInfo(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StakePoolBase.StakeInfoStructOutput]>;

    membershipAddress(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolStartTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rankInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StakePoolBase.RankInfoStructOutput]>;

    rankLen(overrides?: CallOverrides): Promise<[number]>;

    setNextPool(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolStartTimestamp(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRankInfo(
      _interestBonusLending: BigNumberish[],
      _forwardBonusLending: BigNumberish[],
      _minimumStakeAmount: BigNumberish[],
      _maxLTVBonus: BigNumberish[],
      _tradingFee: BigNumberish[],
      _tradingBonus: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettleInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    settlePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StakePoolBase.StakeInfoStructOutput]>;

    stakeVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    totalStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deprecateStakeInfo(
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forwAddress(overrides?: CallOverrides): Promise<string>;

  getMaxLTVBonus(
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StakePoolBase.StakeInfoStructOutput>;

  membershipAddress(overrides?: CallOverrides): Promise<string>;

  migrate(
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextPoolAddress(overrides?: CallOverrides): Promise<string>;

  pause(
    _func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rankInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StakePoolBase.RankInfoStructOutput>;

  rankLen(overrides?: CallOverrides): Promise<number>;

  setNextPool(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolStartTimestamp(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRankInfo(
    _interestBonusLending: BigNumberish[],
    _forwardBonusLending: BigNumberish[],
    _minimumStakeAmount: BigNumberish[],
    _maxLTVBonus: BigNumberish[],
    _tradingFee: BigNumberish[],
    _tradingBonus: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettleInterval(
    interval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleInterval(overrides?: CallOverrides): Promise<BigNumber>;

  settlePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    nftId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StakePoolBase.StakeInfoStructOutput>;

  stakeVaultAddress(overrides?: CallOverrides): Promise<string>;

  totalStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unPause(
    _func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    nftId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deprecateStakeInfo(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forwAddress(overrides?: CallOverrides): Promise<string>;

    getMaxLTVBonus(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePoolBase.StakeInfoStructOutput>;

    membershipAddress(overrides?: CallOverrides): Promise<string>;

    migrate(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePoolBase.StakeInfoStructOutput>;

    nextPoolAddress(overrides?: CallOverrides): Promise<string>;

    pause(_func: BytesLike, overrides?: CallOverrides): Promise<void>;

    poolStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rankInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePoolBase.RankInfoStructOutput>;

    rankLen(overrides?: CallOverrides): Promise<number>;

    setNextPool(_address: string, overrides?: CallOverrides): Promise<void>;

    setPoolStartTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRankInfo(
      _interestBonusLending: BigNumberish[],
      _forwardBonusLending: BigNumberish[],
      _minimumStakeAmount: BigNumberish[],
      _maxLTVBonus: BigNumberish[],
      _tradingFee: BigNumberish[],
      _tradingBonus: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSettleInterval(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleInterval(overrides?: CallOverrides): Promise<BigNumber>;

    settlePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePoolBase.StakeInfoStructOutput>;

    stakeInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePoolBase.StakeInfoStructOutput>;

    stakeVaultAddress(overrides?: CallOverrides): Promise<string>;

    totalStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unPause(_func: BytesLike, overrides?: CallOverrides): Promise<void>;

    unstake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StakePoolBase.StakeInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    deprecateStakeInfo(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forwAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLTVBonus(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    membershipAddress(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rankInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rankLen(overrides?: CallOverrides): Promise<BigNumber>;

    setNextPool(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolStartTimestamp(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRankInfo(
      _interestBonusLending: BigNumberish[],
      _forwardBonusLending: BigNumberish[],
      _minimumStakeAmount: BigNumberish[],
      _maxLTVBonus: BigNumberish[],
      _tradingFee: BigNumberish[],
      _tradingBonus: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettleInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleInterval(overrides?: CallOverrides): Promise<BigNumber>;

    settlePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deprecateStakeInfo(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forwAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLTVBonus(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membershipAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolStartTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rankInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rankLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNextPool(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolStartTimestamp(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRankInfo(
      _interestBonusLending: BigNumberish[],
      _forwardBonusLending: BigNumberish[],
      _minimumStakeAmount: BigNumberish[],
      _maxLTVBonus: BigNumberish[],
      _tradingFee: BigNumberish[],
      _tradingBonus: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettleInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settlePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeVaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unPause(
      _func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      nftId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
