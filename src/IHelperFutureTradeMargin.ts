/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IHelperFutureTradeMarginInterface extends utils.Interface {
  contractName: "IHelperFutureTradeMargin";
  functions: {
    "getDetailAfterAdjustPosition(uint256,uint256,uint256,uint256,uint256,address,address,address,uint256,uint256)": FunctionFragment;
    "getMarginAfterAdjustCollateral(uint256,address,address,uint256,bool,uint256)": FunctionFragment;
    "getMarginAfterClosePosition(uint256,bytes32,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDetailAfterAdjustPosition",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAfterAdjustCollateral",
    values: [BigNumberish, string, string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAfterClosePosition",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDetailAfterAdjustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAfterAdjustCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAfterClosePosition",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHelperFutureTradeMargin extends BaseContract {
  contractName: "IHelperFutureTradeMargin";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHelperFutureTradeMarginInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDetailAfterAdjustPosition(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      contractSize: BigNumberish,
      slipPage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      maintenanceMargin: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        liqPrice: BigNumber;
        wallet: BigNumber;
      }
    >;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      newAmount: BigNumberish,
      isAdd: boolean,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        realPNL: BigNumber;
        percentPNL: BigNumber;
      }
    >;
  };

  getDetailAfterAdjustPosition(
    nftId: BigNumberish,
    entryPrice: BigNumberish,
    leverage: BigNumberish,
    contractSize: BigNumberish,
    slipPage: BigNumberish,
    collateralTokenAddress: string,
    swapTokenAddress: string,
    borrowTokenAddress: string,
    maintenanceMargin: BigNumberish,
    routerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      margin: BigNumber;
      liqPrice: BigNumber;
      wallet: BigNumber;
    }
  >;

  getMarginAfterAdjustCollateral(
    nftId: BigNumberish,
    collateralTokenAddress: string,
    underlyingTokenAddress: string,
    newAmount: BigNumberish,
    isAdd: boolean,
    routerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarginAfterClosePosition(
    nftId: BigNumberish,
    pairByte: BytesLike,
    closingSize: BigNumberish,
    routerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      margin: BigNumber;
      realPNL: BigNumber;
      percentPNL: BigNumber;
    }
  >;

  callStatic: {
    getDetailAfterAdjustPosition(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      contractSize: BigNumberish,
      slipPage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      maintenanceMargin: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        liqPrice: BigNumber;
        wallet: BigNumber;
      }
    >;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      newAmount: BigNumberish,
      isAdd: boolean,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        margin: BigNumber;
        realPNL: BigNumber;
        percentPNL: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getDetailAfterAdjustPosition(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      contractSize: BigNumberish,
      slipPage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      maintenanceMargin: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      newAmount: BigNumberish,
      isAdd: boolean,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDetailAfterAdjustPosition(
      nftId: BigNumberish,
      entryPrice: BigNumberish,
      leverage: BigNumberish,
      contractSize: BigNumberish,
      slipPage: BigNumberish,
      collateralTokenAddress: string,
      swapTokenAddress: string,
      borrowTokenAddress: string,
      maintenanceMargin: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAfterAdjustCollateral(
      nftId: BigNumberish,
      collateralTokenAddress: string,
      underlyingTokenAddress: string,
      newAmount: BigNumberish,
      isAdd: boolean,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAfterClosePosition(
      nftId: BigNumberish,
      pairByte: BytesLike,
      closingSize: BigNumberish,
      routerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
